import click
import logging
import os

from flask import Flask, request
from flask_cors import CORS
from flask_marshmallow import Marshmallow
from flask_smorest import Api
from flask_ldap3_login import LDAP3LoginManager
from flask_login import LoginManager, UserMixin

# settings from
# https://flask-ldap3-login.readthedocs.io/en/latest/quick_start.html

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# workaround for diverging python versions:
try:
    from importlib.metadata import version, PackageNotFoundError
    logger.debug("imported version, PackageNotFoundError from importlib.metadata")
except ModuleNotFoundError:
    from importlib_metadata import version, PackageNotFoundError
    logger.debug("imported version, PackageNotFoundError from importlib_metadata")

# first, try to determine dynamic version at runtime
try:
    __version__ = version(__name__)
    logger.debug("Determined version %s via importlib_metadata.version", __version__)
except PackageNotFoundError:
    # if that fails, check for static version file written by setuptools_scm
    try:
        from .version import version as __version__
        logger.debug("Determined version %s from autogenerated dtool_lookup_gui/version.py", __version__)
    except:
        logger.debug("All efforts to determine version failed.")
        __version__ = None


from dtool_config_generator.config import Config

class ValidationError(ValueError):
    pass


class AuthenticationError(ValueError):
    pass


class AuthorizationError(ValueError):
    pass


class UnknownBaseURIError(KeyError):
    pass


class UnknownURIError(KeyError):
    pass


# Declare an Object Model for the user, and make it comply with the
# flask-login UserMixin mixin.
class User(UserMixin):
    def __init__(self, dn, username, data):
        self.dn = dn
        self.username = username
        self.data = data

    def __repr__(self):
        return self.dn

    def get_id(self):
        return self.dn


ma = Marshmallow()


def create_app(test_config=None):
    app = Flask(__name__)

    CORS(app)

    if test_config is None:
        # load the instance config, if it exists, when not testing
        app.config.from_object(Config)

        # override with config file specified in env variable
        if "FLASK_CONFIG_FILE" in os.environ:
            app.config.from_envvar("FLASK_CONFIG_FILE")

    else:
        # load the test config if passed in
        app.config.from_mapping(test_config)

    ma.init_app(app)

    api = Api(app)

    login_manager = LoginManager(app)

    # Initialise the ldap manager using the settings read into the flask app.
    ldap_manager = LDAP3LoginManager(app)

    # Create a dictionary to store the users in when they authenticate
    # This example stores users in memory.
    users = {}

    from dtool_config_generator import (
        config_routes,
        generate_routes,
        auth_routes,
        main_routes)

    #api.register_blueprint(main_routes.bp)
    api.register_blueprint(generate_routes.bp)
    api.register_blueprint(auth_routes.bp)
    api.register_blueprint(config_routes.bp)

    # Declare a User Loader for Flask-Login.
    # Simply returns the User if it exists in our 'database', otherwise
    # returns None.
    @login_manager.user_loader
    def load_user(id):
        if id in users:
            return users[id]
        return None

    # Declare The User Saver for Flask-Ldap3-Login
    # This method is called whenever a LDAPLoginForm() successfully validates.
    # Here you have to save the user, and return it so it can be used in the
    # login controller.
    @ldap_manager.save_user
    def save_user(dn, username, data, memberships):
        user = User(dn, username, data)
        users[dn] = user
        return user

    @app.before_request
    def log_request():
        """Log the request header in debug mode."""
        app.logger.debug("Request Headers {}".format(request.headers))
        return None

    #############################################################################
    # Command line helper utilities.
    #############################################################################

    @app.cli.command()
    @click.argument('username')
    @click.option('--password', prompt=True, hide_input=True)
    def test_authentication(username, password):
        """Test authentication."""
        ldap_response = ldap_manager.authenticate(username, password)
        print(ldap_response.status)

    return app
